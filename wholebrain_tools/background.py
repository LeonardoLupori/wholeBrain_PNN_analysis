import os
import pandas as pd


def loadBackgroundRegionsDf(searchPath:str, channelName:str, mouseName:str, verbose:bool = True):
    '''
        Loads diffuse and dots data for one mouse and creates a dataframe with 
        raw information (rows = brain regions)

        Parameters
        ----------
        searchPath:str
            folder path for all the raw data
        channelName:str
            either 'wfa' or 'pv'
        mouseName:str
            ID of the mouse to load (e.g., 'CC1A')
        verbose: bool
            additional information about discarded areas

        Returns
        -------
        joined:pd.DataFrame
            output dataframe
        '''

    # Select candidate files based on staining and mouse name
    fileList = os.listdir(searchPath)
    validFiles = [x for x in fileList if (channelName in x) and (mouseName in x)]

    # Load the CSV files in appropriate variables
    foundDiffuse = False
    for fileName in validFiles:
        if '_diffFluo_' in fileName:
            diffuse = pd.read_csv(
                os.path.join(searchPath, fileName),
                index_col='regionID')
            foundDiffuse = True

    
    # If verbose, print out information
    if verbose:
        if not foundDiffuse:
            print(f"Diffuse Fluorescence file not found! [staining: {channelName}, mouse:{mouseName}]")


    # Remove the row with regionID = 0 (background)
    diffuse = diffuse.drop(index=0)

    return diffuse


def allMiceBackgroundRegions(searchPath:str, channelName:str, verbose:bool=False):
    '''
        Load a unified dataFrame for brain regions data of all the mice in the
        searchPath folder 

        Parameters
        ----------
        searchPath:str
            folder path for all the raw data
        channelName:str
            either 'wfa' or 'pv'
        verbose: bool
            additional information about discarded areas

        Returns
        -------
        dfMerged:pd.DataFrame
            output dataframe with metrics from all mice
        '''
    
    fileList = os.listdir(searchPath)

    # Create a list of the unique names of all the mice
    miceList = [x.split('_')[0] for x in fileList]
    miceList = list(set(miceList))  # remove duplicate
    miceList.sort()                 # sort alphabetically

    # Assemble all animals in a list of dataFrames
    dfList = [loadBackgroundRegionsDf(searchPath, channelName, x, verbose=verbose) for x in miceList]

    # Concatenate all the dataframes
    dfMerged = pd.concat(
        dfList,
        axis=1,
        join='outer',
        names=['mouse','params'],
        keys=miceList,
        sort=True)
    return dfMerged


def backgroundRegionsDf_to_mid( rawDf, Atlas, normalize:bool=True, verbose:bool=False, nc_string:str = 'A',
    not_to_drop=[]) -> pd.DataFrame:
    '''
    Converts the multi index dataframe generated by multiIndexDf_from_fineDf
    in a dataframe of regions at mid ontology levels

    Parameters
    ----------
    rawDf: pd.DataFrame
        Multiindex df generated by multiIndexDf_from_fineDf.
    Atlas: aba.Atlas object
        Atlas object to manage anatomy information
    normalize: bool=True
        Whether to normalize diffuseFluorescence and energy. If True, for each
        animal, energy and diffFluo are divided by energy and diffFluo calculated
        for the entire brain.
    verbose: bool=False
        Prints out additional information about areas that are dropped
    nc_string:str = 'A'
        Substring in the mouse name identifying negative control sections
    not_to_drop: list = []
        List of area IDs that should not be excluded by the algorithm.
    Returns
    -------
    df: pd.DataFrame
        multiindex dataframe
    '''

    indexList = [(x[0][:3],'NC', x[1]) if nc_string in x[0] else (x[0][:3],'stain', x[1]) for x in rawDf.columns ]
    rawDf.columns= pd.MultiIndex.from_tuples(indexList, names=['mouse', 'treat', 'params'])
    rawStain = rawDf.xs('stain', axis='columns', level='treat')
    rawNc = rawDf.xs('NC', axis='columns', level='treat')

    groupedStain = rawStain.groupby(by=['coarse','mid'], axis=0).sum()
    groupedNc = rawNc.groupby(by=['coarse','mid'], axis=0).sum()


    # Calculate extract dataFrames of single measurements
    areaPxStain = groupedStain.xs('areaPx',axis='columns',level='params')
    diffFluoStain = groupedStain.xs('diffFluo',axis='columns',level='params')
    diffFluoStain = diffFluoStain.divide(areaPxStain)


    # Calculate extract dataFrames of single measurements
    areaPxNc = groupedNc.xs('areaPx',axis='columns',level='params')
    diffFluoNc = groupedNc.xs('diffFluo',axis='columns',level='params')
    diffFluoNc = diffFluoNc.divide(areaPxNc)

    # Normalize metrics on the whole brain if requested
    if normalize:
        # Diff Fluo and energy for the whole brain
        brainDiffFluo = wholeBrainDiffFluo(rawStain)
        # Normalize
        diffFluoStain = diffFluoStain.divide(brainDiffFluo)
        diffFluoNc = diffFluoNc.divide(brainDiffFluo)

    # Merge data for WFA-stained and negative control slices
    diffFluo = pd.concat([diffFluoStain, diffFluoNc], axis='columns',  keys=['stain','NC'], names =['treat', 'mouse'] ).swaplevel(axis= 'columns').sort_index(axis= 'columns')
    # Sort rows based on the areas ontology
    diffFluo['sort'] = Atlas.ids_to_graph_order(diffFluo.index.get_level_values('mid').to_list())
    diffFluo = diffFluo.sort_values(by=('sort')).drop('sort', axis=1)

    # Drop non informative areas
    midIndex = diffFluo.index.get_level_values('mid').tolist() 
    midlist = Atlas.get_midontology_structures_ids()
    midlist.extend(not_to_drop)
    areasToDrop = [x for x in midIndex if x not in midlist]
    temp = diffFluo.drop(index=areasToDrop, level='mid')
    if verbose:
        for droppedArea in areasToDrop:
            print(f"- Area ID:{droppedArea} - Name: {Atlas.get_structures_by_id([droppedArea])[0]['name']} dropped.")

    return temp


def wholeBrainDiffFluo(rawDf):
    """
    Calculates energy and diffuse fluorescence metrics for the whole brain
    for each animal.
    Parameters
    ----------
    rawDf: pd.DataFrame
        Multiindex df generated by multiIndexDf_from_fineDf.
    Returns
    -------
    brainDiffFluo: pd.DataFrame
        DataFrame with whole brain diffuse fluorescence for each animal
    """
    # Calculate metric for the total brain by using the raw Df
    brainAreaPx = rawDf.xs('areaPx', axis=1, level='params').sum()
    brainDiffIntensity = rawDf.xs('diffFluo', axis=1, level='params').sum()
    # Calculate the energy and diffFluo of the entire brain
    brainDiffFluo = brainDiffIntensity.divide(brainAreaPx)

    return brainDiffFluo